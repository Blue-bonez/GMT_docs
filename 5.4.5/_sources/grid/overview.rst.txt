网格文件简介
============

GMT可以绘制2D网格数据。通常，2D网格文件的X方向代表经度、Y方向代表纬度，Z值可以
表示高程、重力值、温度、速度等。也可以将 XYZ 格式的 1D 表数据网格化得到 2D 网格数据。

GMT可以使用的2D网格数据有四种格式：

#. netCDF格式
#. Sun光栅文件
#. Native二进制格式
#. 用户自定义网格格式

最常见也最推荐的网格数据格式是 netCDF 格式。

netCDF网格文件
--------------

GMT默认将2D网格保存为兼容COARDS的netCDF文件，一般以 ``.nc`` 或 ``.grd`` 作为
文件后缀。

COARDS是许多机构在分发网格文件时遵循的标准格式。GMT兼容该格式，因而GMT可以直接
读取其他机构或程序提供的网格文件，GMT生成的网格文件也可以被其他程序读取。

netCDF格式目前有两个版本，netCDF3和netCDF4。GMT目前默认使用netCDF4版本的文件格式。

netCDF的非数据部分，包含了众多属性，这些属性完整地描述了netCDF文件的内容。下表列出了netCDF的众多属性：

.. table:: netCDF格式说明

   +----------------------+--------------------------------------------------------------------+
   | **Attribute**        | **Description**                                                    |
   +======================+====================================================================+
   |                      | *Global attributes*                                                |
   +----------------------+--------------------------------------------------------------------+
   | Conventions          | COARDS, CF-1.5 (optional)                                          |
   +----------------------+--------------------------------------------------------------------+
   | title                | Title (optional)                                                   |
   +----------------------+--------------------------------------------------------------------+
   | source               | How file was created (optional)                                    |
   +----------------------+--------------------------------------------------------------------+
   | node_offset          | 0 for gridline node registration (default),                        |
   |                      | 1 for pixel registration                                           |
   +----------------------+--------------------------------------------------------------------+
   |                      | *x- and y-variable attributes*                                     |
   +----------------------+--------------------------------------------------------------------+
   | long_name            | Coordinate name (e.g., "Longitude" and "Latitude")                 |
   +----------------------+--------------------------------------------------------------------+
   | units                | Unit of the coordinate (e.g., "degrees_east" and "degrees_north")  |
   +----------------------+--------------------------------------------------------------------+
   | actual range         | Minimum and maximum *x* and *y* of region; if absent the           |
   | (or valid range)     | first and last *x*- and *y*-values are queried                     |
   +----------------------+--------------------------------------------------------------------+
   |                      | *z-variable attributes*                                            |
   +----------------------+--------------------------------------------------------------------+
   | long_name            | Name of the variable (default: "z")                                |
   +----------------------+--------------------------------------------------------------------+
   | units                | Unit of the variable                                               |
   +----------------------+--------------------------------------------------------------------+
   | scale_factor         | Factor to multiply *z* with (default: 1)                           |
   +----------------------+--------------------------------------------------------------------+
   | add_offset           | Offset to add to scaled *z* (default: 0)                           |
   +----------------------+--------------------------------------------------------------------+
   | actual_range         | Minimum and maximum *z* (in unpacked units, optional) and *z*      |
   +----------------------+--------------------------------------------------------------------+
   | \_FillValue          | Value associated with missing or invalid data points; if absent an |
   | (or missing_value)   | appropriate default value is assumed, depending on data type.      |
   +----------------------+--------------------------------------------------------------------+

默认情况下，GMT会将netCDF文件中的第一个2D变量作为Z变量，而坐标轴X和Y的范围则从属性中提取出来。

Native二进制格式
----------------

在很久以前的 GMT 中，其自定义了一套二进制网格文件格式。但由于其通用性太差，
已经被更现代的 netCDF 格式所取代。新版本的
GMT依然支持这种二进制网格格式，但不建议使用。该文件格式由两部分组成：892个字节的
头段区和长度不定的数据区。

native 二进制网格格式包含了一个892字节的头段区以及长度不定的数据区。头段区中包含了
用于描述网格文件的变量，这些变量在文件中的存储顺序及其含义如下表：

.. table:: GMT自定义二进制网格文件结构

   +--------------------+------------------+------------------------------------------+
   | 参数               |   类型           |    说明                                  |
   +====================+==================+==========================================+
   | ``nx``             | ``int``          | X方向节点数目                            |
   +--------------------+------------------+------------------------------------------+
   | ``ny``             | ``int``          | Y方向节点数目                            |
   +--------------------+------------------+------------------------------------------+
   | ``registration``   | ``int``          | 配准方式：0代表网格线配准，1代表像素配准 |
   +--------------------+------------------+------------------------------------------+
   | ``x_min``          | ``double``       | 区域的X最小值                            |
   +--------------------+------------------+------------------------------------------+
   | ``x_max``          | ``double``       | 区域的X最大值                            |
   +--------------------+------------------+------------------------------------------+
   | ``y_min``          | ``double``       | 区域的Y最小值                            |
   +--------------------+------------------+------------------------------------------+
   | ``y_max``          | ``double``       | 区域的Y最大值                            |
   +--------------------+------------------+------------------------------------------+
   | ``z_min``          | ``double``       | 数据的Z最小值                            |
   +--------------------+------------------+------------------------------------------+
   | ``z_max``          | ``double``       | 数据的Z最大值                            |
   +--------------------+------------------+------------------------------------------+
   | ``x_inc``          | ``double``       | X方向的节点间隔                          |
   +--------------------+------------------+------------------------------------------+
   | ``y_inc``          | ``double``       | Y方向的节点间隔                          |
   +--------------------+------------------+------------------------------------------+
   | ``z_scale_factor`` | ``double``       | 读取Z值后要乘以的因子                    |
   +--------------------+------------------+------------------------------------------+
   | ``z_add_offset``   | ``double``       | Z值乘以因子后要加上的偏移量              |
   +--------------------+------------------+------------------------------------------+
   | ``x_units``        | ``char[80]``     | X方向的单位                              |
   +--------------------+------------------+------------------------------------------+
   | ``y_units``        | ``char[80]``     | Y方向的单位                              |
   +--------------------+------------------+------------------------------------------+
   | ``z_units``        | ``char[80]``     | Z方向的单位                              |
   +--------------------+------------------+------------------------------------------+
   | ``title``          | ``char[80]``     | 对数据集的描述                           |
   +--------------------+------------------+------------------------------------------+
   | ``command``        | ``char[320]``    | 生成该数据的命令                         |
   +--------------------+------------------+------------------------------------------+
   | ``remark``         | ``char[160]``    | 额外的注释                               |
   +--------------------+------------------+------------------------------------------+
   | ``z``              | ``TYPE [nx*ny]`` | Z值数组                                  |
   +--------------------+------------------+------------------------------------------+

.. _sun-raster:

Sun光栅文件
-----------

GMT 可以读取 Sun光栅文件格式的网格文件。Sun 光栅文件包含了一个头段区以及一系列
无符号一字节整型以表示bit-pattern。所有的字节按照 scanline 方式排列，每行
必须包含偶数个字节。

Sun光栅文件头段区的结构如下表：

.. table:: Sun光栅文件头段区

   +-------------------+---------+------------------------------+
   | 变量              | 类型    | 说明                         |
   +===================+=========+==============================+
   | ``ras_magic``     | ``int`` | 魔法数，用于唯一标记数据格式 |
   +-------------------+---------+------------------------------+
   | ``ras_width``     | ``int`` | 图片宽度（像素数）           |
   +-------------------+---------+------------------------------+
   | ``ras_height``    | ``int`` | 图片高度（像素数）           |
   +-------------------+---------+------------------------------+
   | ``ras_depth``     | ``int`` | 像素深度（1、8、24、32位）   |
   +-------------------+---------+------------------------------+
   | ``ras_length``    | ``int`` | 图片长度（字节数）           |
   +-------------------+---------+------------------------------+
   | ``ras_type``      | ``int`` | 文件类型                     |
   +-------------------+---------+------------------------------+
   | ``ras_maptype``   | ``int`` | colormap类型                 |
   +-------------------+---------+------------------------------+
   | ``ras_maplength`` | ``int`` | 接下来的map的长度（字节数）  |
   +-------------------+---------+------------------------------+

在头段区后，若 ``ras_maptype`` 不等于 ``RMT_NONE``\ ，则紧接着是 ``ras_maplength``
个字节的color map区，然后是 ``ras_length`` 个字节的图片区。

相关的一些宏定义如下表：

.. table:: Sun头段区的宏定义

   +---------------------+-------------------------------------------+
   | **宏**              | **说明**                                  |
   +=====================+===========================================+
   | ``RAS_MAGIC``       | 0x59a66a95                                |
   +---------------------+-------------------------------------------+
   | ``RT_STANDARD``     | 1 (Raw pixrect image in 68000 byte order) |
   +---------------------+-------------------------------------------+
   | ``RT_BYTE_ENCODED`` | 2 (Run-length compression of bytes)       |
   +---------------------+-------------------------------------------+
   | ``RT_FORMAT_RGB``   | 3 ([X]RGB instead of [X]BGR)              |
   +---------------------+-------------------------------------------+
   | ``RMT_NONE``        | 0 (ras_maplength is expected to be 0)     |
   +---------------------+-------------------------------------------+
   | ``RMT_EQUAL_RGB``   | 1 (red[ras_maplength/3],green[],blue[])   |
   +---------------------+-------------------------------------------+

用户自定义网格格式
------------------

GMT还可以读取用户自定义的网格文件，只要用户写好自定义网格文件的读写子程序，
并将其与GMT函数库链接起来即可。详情参考源码中的 ``gmt_customio.c`` 文件。
